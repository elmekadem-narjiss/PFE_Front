name: Frontend Build with Sonar and Amplify

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  AWS_REGION: 'eu-north-1'  # Ajustez selon votre région
  LOG_GROUP_NAME: '/github/actions/workflow'  # Nom du groupe de journaux

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Installer les dépendances
        run: npm install
      - name: Construire le frontend
        run: npm run build
      - name: Vérifier la sortie de build
        run: ls -la .next/ || echo "Sortie de build non trouvee"
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux de build à CloudWatch
        run: |
          # Définir le message sans accents
          MESSAGE="Etape de build terminee a $(date -u)"
          # Générer un fichier JSON valide
          echo "{\"events\": [{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]}" > build.log
          # Forcer la synchronisation du système de fichiers
          sync
          # Vérifier que le fichier existe et n'est pas vide
          if [ ! -s build.log ]; then
            echo "Erreur : build.log est vide ou inexistant"
            exit 1
          fi
          # Vérifier le contenu du fichier avant envoi
          echo "Contenu de build.log avant envoi :"
          cat build.log
          # Envoyer les événements au groupe de journaux (via fichier)
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/build --log-events file://build.log
          # Alternative : envoyer directement le JSON pour tester
          # aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/build --log-events "[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Installer les dépendances
        run: npm install
      - name: Exécuter les tests avec Jest
        run: npx jest --coverage --coverageReporters=lcov
      - name: Vérifier la sortie de couverture
        run: |
          ls -la coverage/ && cat coverage/lcov.info || echo "Rapport de couverture non genere"
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux de test à CloudWatch
        run: |
          MESSAGE="Etape de test terminee a $(date -u)"
          echo "{\"events\": [{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]}" > test.log
          sync
          if [ ! -s test.log ]; then
            echo "Erreur : test.log est vide ou inexistant"
            exit 1
          fi
          echo "Contenu de test.log avant envoi :"
          cat test.log
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/test --log-events file://test.log
          # Alternative : envoyer directement le JSON pour tester
          # aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/test --log-events "[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  typescript:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Installer les dépendances
        run: npm install
      - name: Exécuter la vérification TypeScript
        run: npx tsc --noEmit
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux TypeScript à CloudWatch
        run: |
          MESSAGE="Verification TypeScript terminee a $(date -u)"
          echo "{\"events\": [{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]}" > typescript.log
          sync
          if [ ! -s typescript.log ]; then
            echo "Erreur : typescript.log est vide ou inexistant"
            exit 1
          fi
          echo "Contenu de typescript.log avant envoi :"
          cat typescript.log
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/typescript --log-events file://typescript.log
          # Alternative : envoyer directement le JSON pour tester
          # aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/typescript --log-events "[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Installer les dépendances
        run: npm install
      - name: Installer SonarScanner
        run: npm install -g sonar-scanner
      - name: Exécuter l'analyse SonarCloud
        run: |
          sonar-scanner \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN_FRONT }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.analysis.mode=publish \
            -Dsonar.inclusions=**/*.ts,**/*.tsx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Envoyer les journaux SonarCloud à CloudWatch
        run: |
          MESSAGE="Analyse SonarCloud terminee a $(date -u)"
          echo "{\"events\": [{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]}" > sonar.log
          sync
          if [ ! -s sonar.log ]; then
            echo "Erreur : sonar.log est vide ou inexistant"
            exit 1
          fi
          echo "Contenu de sonar.log avant envoi :"
          cat sonar.log
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/sonarcloud --log-events file://sonar.log
          # Alternative : envoyer directement le JSON pour tester
          # aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/sonarcloud --log-events "[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  amplify-deploy:
    runs-on: ubuntu-latest
    needs: [build, test, sonarcloud]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      - name: Configurer les identifiants AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Configurer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Installer les dépendances
        run: npm install
      - name: Construire le frontend
        run: npm run build
      - name: Vérifier la sortie de build
        run: ls -la .next/ || echo "Sortie de build non trouvee"
      - name: Téléverser les artefacts de build
        uses: actions/upload-artifact@v4
        with:
          name: next-build-artifacts
          path: .next/
      - name: Déclencher le build Amplify
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --job-type RELEASE
      - name: Envoyer les journaux de déploiement à CloudWatch
        run: |
          MESSAGE="Deploiement Amplify termine a $(date -u)"
          echo "{\"events\": [{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]}" > deploy.log
          sync
          if [ ! -s deploy.log ]; then
            echo "Erreur : deploy.log est vide ou inexistant"
            exit 1
          fi
          echo "Contenu de deploy.log avant envoi :"
          cat deploy.log
          aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/deploy --log-events file://deploy.log
          # Alternative : envoyer directement le JSON pour tester
          # aws logs put-log-events --log-group-name ${{ env.LOG_GROUP_NAME }} --log-stream-name ${{ github.run_id }}/deploy --log-events "[{\"timestamp\": $(date -u +%s%3N), \"message\": \"${MESSAGE}\"}]"
        if: always()
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
